print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(Merge$CellLabel))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(Merge$CellLabel)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,12)
names(P_set)<-unique(Merge$CellLabel)
for (ct in unique(Merge$CellLabel)){
cell_types<-colnames(Merge)[which(Merge$CellLabel==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
Data_mtrix
table(Data_mtrix==0)
Data_mtrix[Data_mtrix==0]<-2.2e-16
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
#Data_mtrix_log<--log10(Data_mtrix+0.00000000000001)
Data_mtrix_log<--log10(Data_mtrix)
pheatmap(width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf") ,border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
-log10(1+0.000001)
table(Data_mtrix==0)
print(paste0("Cutoff: ",cutoff))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(Merge$CellLabel))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(Merge$CellLabel)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,12)
names(P_set)<-unique(Merge$CellLabel)
for (ct in unique(Merge$CellLabel)){
cell_types<-colnames(Merge)[which(Merge$CellLabel==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
table(Data_mtrix==0)
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
table(Mydata_raw_FDR==0)
table(Data_mtrix==0)
#Data_mtrix[Data_mtrix==0]<-2.2e-16
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
table(Mydata_raw_FDR==0)
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
table(Data_mtrix==0)
#Data_mtrix[Data_mtrix==0]<-2.2e-16
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
#Data_mtrix[Data_mtrix==0]<-2.2e-16
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
table(Mydata_raw_FDR==0)
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Data_mtrix_log<--log10(Mydata_raw_m+0.00000000000001)
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
breaksList = seq(0, 10, by = 1)
width=dim(Data_mtrix_log)[2]/188
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
#pdf(file = paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf"),width = 25*width+5,height = 5)
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
pheatmap(width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf") ,border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
dimnames(Data_mtrix_log)<-dimnames(Data_mtrix)
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
width=dim(Data_mtrix_log)[2]/188
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
#pdf(file = paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf"),width = 25*width+5,height = 5)
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
pheatmap(width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf") ,border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
runApp('~/Downloads/MFIs1')
load("/Users/yaoyuelin/Desktop/LIHC/LIHC.Rdata")
Merge$CellLabel<-Idents(Merge)
trainingData<-read.csv("/Volumes/khamseh-lab/Yuelin/pancancer/LIHC/output/output/trainingData_CL01_14698Cells_1000Genes.csv")
topDeviatingHOIstates<-read.csv("/Volumes/khamseh-lab/Yuelin/pancancer/LIHC/output/HOIsummaries/topDeviatingHOIstates.csv",colClasses = c("character"))
fullLinkageMatrix_labels<-read.csv("/Volumes/khamseh-lab/Yuelin/pancancer/LIHC/output/states_output/fullLinkageMatrix_labels.csv")
# 1. Binary the matrix
count<-Merge@assays[["RNA"]]@counts
count<-as.matrix(count)
count<-count[gene,]
count<-t(count)
count[count>0]<-1
count[count==0]<-0
count[1:10,1:10]
cutoff=0.95
print(paste0("Cutoff: ",cutoff))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(Merge$CellLabel))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(Merge$CellLabel)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,12)
names(P_set)<-unique(Merge$CellLabel)
for (ct in unique(Merge$CellLabel)){
cell_types<-colnames(Merge)[which(Merge$CellLabel==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
Data_mtrix
6.18174e-32
Data_mtrix==0
which(Data_mtrix==0)
ct="Hepatocytes"
Cell
Devstates$cluster
cluster="C:18"
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
cluster="C:18"
i="C:18"
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
length(Cell)
cell_types<-colnames(Merge)[which(Merge$CellLabel==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
dim(Merge)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
p_value
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = T) #https://www.biostars.org/p/15548/
p_value
e^-1433.439
e-1433.439
e
exp(-1433.439)
exp(-1433.439)
10^{-16}
bigfloat(1)
q
m
cell_types
length(cell_types)
table(Merge$CellLabel)
i
m
30941-1090
30941-738
length(intersect(Cell,cell_types))
q
length(Cell)
n
k
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = T) #https://www.biostars.org/p/15548/
p_value
exp(-1433.439)
phyper(4413, 5821, 8877, 7218, lower.tail = FALSE, log.p = FALSE)
cutoff=0.95
print(paste0("Cutoff: ",cutoff))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(Merge$CellLabel))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(Merge$CellLabel)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,12)
names(P_set)<-unique(Merge$CellLabel)
for (ct in unique(Merge$CellLabel)){
cell_types<-colnames(Merge)[which(Merge$CellLabel==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = F) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
e^-1433.439
2.2e^-1433.439
2.2^-1433.439
Data_mtrix
table(Data_mtrix==0)
#Data_mtrix[Data_mtrix==0]<-2.2e-16
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
table(Mydata_raw_FDR==0)
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Data_mtrix_log<--log10(Mydata_raw_m+0.00000000000001)
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
dim(Data_mtrix)
Mydata_raw_m
is.infinite(Data_mtrix) %>% table()
rowSums(Data_mtrix_log)
breaksList = seq(0, 10, by = 1)
dimnames(Data_mtrix_log)<-dimnames(Data_mtrix)
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
width=dim(Data_mtrix_log)[2]/188
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
#pdf(file = paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf"),width = 25*width+5,height = 5)
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
pheatmap(width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/p-value_",cutoff,"_heatmap.pdf") ,border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
runApp('~/Downloads/MFIs1')
shiny::runApp()
runApp()
unit(5,"inch")
unit(5,"inch")
unit(5,"mm")
runApp()
runApp()
runApp()
runApp()
runApp()
c("Over-representation","cell types with NMFs")
a=c("Over-representation","cell types with NMFs")
a
nchar(a)
max(nchar(a))
nchar(rownames(result1()[["Data_mtrix_log"]]))
20*4/25.4
runApp()
runApp()
shiny::runApp()
library(org.Hs.eg.db)
library("org.Hs.eg.db")
library(org.Hs.eg.db)
there is no package called ‘org.Hs.eg.db’
renv::init()
runApp()
shiny::runApp()
renv::init()
runApp()
shiny::runApp()
renv::init()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("/Users/yaoyuelin/Desktop/LIHC/CHCA_PDAC/CHCA.Rdata")
load("/Users/yaoyuelin/Desktop/LIHC/CHCA_PDAC/PDAC.Rdata")
Merge<-merge(x=CHCA,y=PDAC)
Merge <- NormalizeData(Merge, normalization.method = "LogNormalize", scale.factor = 10000)
Merge <- FindVariableFeatures(Merge, selection.method = "vst", nfeatures = 1000)
Merge@meta.data
colnames(Merge@meta.data)
Merge@meta.data$first.labels
Merge@meta.data$tuning.scores.first
Merge@meta.data$cancer
Idents(Merge@meta.data)
Idents(Merge)
colnames(Merge@meta.data)
table(Idents(Merge)==Merge@meta.data$first.labels)
Merge$Celltype<-Idents(Merge)
meta_data<-Merge@meta.data[c("cancer","Celltype")]
meta_data
meta_data$cancer<-paste(meta_data$cancer,meta_data$Celltype,sep = "-")
meta_data
write.csv(meta_data,file="/Users/yaoyuelin/LIHC/CHCA_PDAC/Meta_data.csv")
write.csv(meta_data,file="/Users/yaoyuelin/Desktop/LIHC/CHCA_PDAC/Meta_data.csv")
runApp()
