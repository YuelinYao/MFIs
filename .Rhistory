state_vector <- str_to_int_vec(x[["state"]])
row_matches <- apply(gene_values == state_vector, 1, all)
#as.integer(row_matches)
})
binReps
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps <- apply(devStates, 1, function(x) {
gene_values <- trainDat[i,str_split(x['genes'], "_")[[1]]]
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
row_matches <- apply(gene_values == state_vector, 1, all)
#as.integer(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
row_matches <- apply(gene_values == state_vector, 1, all)
#as.integer(row_matches)
})
binReps
binReps
binReps<-array(data = NA,dim = c(nrow(devStates),nrow(trainDat)),dimnames = list(devStates$genes,rownames(trainDat)))
binReps
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
row_matches <- apply(gene_values == state_vector, 1, all)
})
binReps
colnames(binReps)<-rownames(devStates)
binReps
colnames(binReps)<-devStates$genes
binReps
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
row_matches <- apply(gene_values == state_vector, 1, all)
})
colnames(binReps1)<-devStates$genes
binReps
for (i in 1:ncol(binReps)){
binReps[,i]<-apply(devStates,1,function(x){
all(trainDat[i,str_split(x['genes'], "_")[[1]]]==as.numeric(strsplit(as.character(x['state']),"")[[1]]))
})
}
binReps<-array(data = NA,dim = c(nrow(devStates),nrow(trainDat)),dimnames = list(devStates$genes,rownames(trainDat)))
binReps
trainDat
binReps
for (i in 1:ncol(binReps)){
binReps[,i]<-apply(devStates,1,function(x){
all(trainDat[i,str_split(x['genes'], "_")[[1]]]==as.numeric(strsplit(as.character(x['state']),"")[[1]]))
})
}
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
row_matches <- apply(gene_values == state_vector, 1, all)
})
colnames(binReps1)<-devStates$genes
binReps1
binReps
trainDat
devStates
gene_cols <- match(strsplit(devStates$genes, "_"), colnames(trainDat))
gene_cols
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print("genevalue")
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
devStates
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print("genevalue")
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
binReps1
colnames(binReps1)<-devStates$genes
binReps1
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- as.numeric(trainDat[,str_split(x['genes'], "_")[[1]]])
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
binReps1
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
print(gene_values == state_vector)
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(class(gene_values))
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(clas(state_vector))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(class(gene_values))
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(class(state_vector))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(as.numeric(gene_values) == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(class(gene_values[1,1]))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
gene_values<-as.data.frame(gene_values )
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
gene_values<-as.data.frame(gene_values )
print(state_vector==gene_values)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
#row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
#print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
#row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
print(row_matches)
})
#print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, print)
#print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, print(gene_values == state_vector))
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
#row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
print(row_matches)
})
binReps1
colnames(binReps1)<-devStates$genes
binReps1
binReps
trainDat
count[1:10,1:10]
shiny::runApp('Downloads/MFIs')
shiny::runApp('Downloads/MFIs')
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
py_install("scipy")
reticulate::py_install("scipy")
runApp('Downloads/MFIs')
scipy <- import("scipy")
library(reticulate)
scipy <- import("scipy")
virtualenv_list()
virtualenv_install("example_env_name", c('pip', 'numpy','pandas','igraph','argparse','scipy',
'matplotlib','Pillow','seaborn'))
virtualenv_create("example_env_name")
virtualenv_install("example_env_name", c('pip', 'numpy','pandas','igraph','argparse','scipy',
'matplotlib','Pillow','seaborn'))
virtualenv_create("example_env_name",python = "/usr/bin/python3")
virtualenv_install("example_env_name", c('pip', 'numpy','pandas','igraph','argparse','scipy',
'matplotlib','Pillow','seaborn'))
runApp('Downloads/MFIs')
reticulate::conda_list()
library(reticulate)
reticulate::py_config()
runApp('Downloads/MFIs')
reticulate::py_config()
shiny::runApp('Downloads/MFIs')
reticulate::py_config()
reticulate::virtualenv_install("r-reticulate", packages = c('numpy','pandas','scipy'), ignore_installed=TRUE)
# ====== import R libraries: ####
# Some initial setup:
#library(BiocManager)
#options(repos = BiocManager::repositories())
# Define any Python packages needed for the app in R:
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','igraph','argparse','scipy',
'matplotlib','Pillow','seaborn')
runApp('Downloads/MFIs')
# ====== import R libraries: ####
# Some initial setup:
#library(BiocManager)
#options(repos = BiocManager::repositories())
# Define any Python packages needed for the app in R:
#PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','igraph','argparse','scipy',
#'matplotlib','Pillow','seaborn')
PYTHON_DEPENDENCIES = c('numpy','pandas','scipy')
# ------------------ App virtualenv setup (Do not edit) ------------------- #
# VIRTUALENV_NAME and PYTHON_PATH are definded in .Rprofile
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
virtualenv_dir
python_path
setwd()
getwd()
setwd("//Users/yaoyuelin/Downloads/MFIs")
# ------------------ App virtualenv setup (Do not edit) ------------------- #
# VIRTUALENV_NAME and PYTHON_PATH are definded in .Rprofile
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
virtualenv_dir
setwd("/Users/yaoyuelin/Downloads/MFIs")
python_path = Sys.getenv('PYTHON_PATH')
# ------------------ App virtualenv setup (Do not edit) ------------------- #
# VIRTUALENV_NAME and PYTHON_PATH are definded in .Rprofile
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
virtualenv_dir
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
library(shiny)
library(shinythemes)
# ====== import R libraries: ####
# Some initial setup:
#library(BiocManager)
#options(repos = BiocManager::repositories())
# Define any Python packages needed for the app in R:
#PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','igraph','argparse','scipy',
#'matplotlib','Pillow','seaborn')
PYTHON_DEPENDENCIES = c('numpy','pandas','scipy')
# ------------------ App virtualenv setup (Do not edit) ------------------- #
# VIRTUALENV_NAME and PYTHON_PATH are definded in .Rprofile
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
runApp()
runApp()
# ====== import R libraries: ####
# Some initial setup:
#library(BiocManager)
#options(repos = BiocManager::repositories())
# Define any Python packages needed for the app in R:
#PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','igraph','argparse','scipy',
#'matplotlib','Pillow','seaborn')
PYTHON_DEPENDENCIES = c('numpy','pandas','scipy')
# ------------------ App virtualenv setup (Do not edit) ------------------- #
# VIRTUALENV_NAME and PYTHON_PATH are definded in .Rprofile
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
