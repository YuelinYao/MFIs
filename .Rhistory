unlist()
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(graph, nodes = 1)
V(graph)$names
V(graph)$name
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>%
igraph::neighborhood(graph, ., order = 1, mode = "in") %>%
unlist()%>%names()
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST","HP","HIST1H4C"))
mb(MCMC_graph,c("GAST"))
nodes=c("GAST") #,"HP","HIST1H4C"
children<-neighborhood(graph=MCMC_graph,nodes=nodes ,order = 1,mode = "out")
parent<-neighborhood(graph=MCMC_graph,nodes = nodes ,order = 1,mode = "in")
children
parent
for (p in parent){
parent_nodes<-rownames(MCMC)[as.vector(p)]
for (c in children){
children_nodes<-rownames(MCMC)[as.vector(c)]
spouses<-neighborhood(graph =MCMC_graph,nodes = c, order = 1,mode = "out")
#spouses[which.min(lengths(spouses))]
for (s in spouses){
spouse_nodes<-rownames(MCMC)[as.vector(s)]
spouse_nodes<-setdiff(spouse_nodes,nodes)
print("List")
List<-unique(c(parent_nodes,spouse_nodes,children_nodes))
print(List)
}
}
}
#spouses[which.min(lengths(spouses))]
list<-NULL
for (p in parent){
parent_nodes<-rownames(MCMC)[as.vector(p)]
for (c in children){
children_nodes<-rownames(MCMC)[as.vector(c)]
spouses<-neighborhood(graph =MCMC_graph,nodes = c, order = 1,mode = "out")
#spouses[which.min(lengths(spouses))]
list<-NULL
for (s in spouses){
spouse_nodes<-rownames(MCMC)[as.vector(s)]
spouse_nodes<-setdiff(spouse_nodes,nodes)
print("List")
List<-unique(c(parent_nodes,spouse_nodes,children_nodes))
list<-c(list,List)
}
}
}
list
list<-unique(list)
list
mb(MCMC_graph,c("GAST"))
mb(MCMC_graph,c("GAST"))
children<-neighborhood(graph=MCMC_graph,nodes=nodes ,order = 1,mode = "out")
parent<-neighborhood(graph=MCMC_graph,nodes = nodes ,order = 1,mode = "in")
children
parent
spouses<-neighborhood(graph =MCMC_graph,nodes = children, order = 1,mode = "out")
children
spouses<-neighborhood(graph =MCMC_graph,nodes = children, order = 1,mode = "out")
children
spouses<-neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
spouses
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #the parent of your children
unlist()%>%names()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
nodes=c("GAST") #,"HP","HIST1H4C"
children<-neighborhood(graph=MCMC_graph,nodes=nodes ,order = 1,mode = "out")
parent<-neighborhood(graph=MCMC_graph,nodes = nodes ,order = 1,mode = "in")
children
parent
children
spouses<-neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
spouses
spouses<-unique(names(unlist(spouses)))
spouses
mb<-unique(names(unlist(children)),spouses,names(unlist(parent)))
mb<-unique(c(names(unlist(children)),spouses,names(unlist(parent))))
mb
children<-neighborhood(graph=MCMC_graph,nodes=nodes ,order = 1,mode = "out")
parent<-neighborhood(graph=MCMC_graph,nodes = nodes ,order = 1,mode = "in")
for (p in parent){
parent_nodes<-rownames(MCMC)[as.vector(p)]
for (c in children){
children_nodes<-rownames(MCMC)[as.vector(c)]
spouses<-neighborhood(graph =MCMC_graph,nodes = c, order = 1,mode = "out")
#spouses[which.min(lengths(spouses))]
list<-NULL
for (s in spouses){
spouse_nodes<-rownames(MCMC)[as.vector(s)]
spouse_nodes<-setdiff(spouse_nodes,nodes)
print("List")
List<-unique(c(parent_nodes,spouse_nodes,children_nodes))
list<-c(list,List)
}
}
}
list<-unique(list)
list
intersect(list,mb)
mb(MCMC_graph,c("GAST"))
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #the parent of your children
unlist()%>%names()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
intersect(mb(MCMC_graph,c("GAST")),mb)
mb
intersect(list,mb)
intersect(mb(MCMC_graph,c("GAST")),list)
list
intersect(mb(MCMC_graph,c("GAST"))[[1]],list)
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #the parent of your children
unlist()%>%names()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb
library(MXM)
MB
mb
MXM::mb
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
print()%>%
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #the parent of your children
unlist()%>%names()%>% print()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
children
neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
spouses<-neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
spouses<-unique(names(unlist(spouses)))
spouses
mb(MCMC_graph,c("GAST"))
spouses<-neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
spouses<-names(unlist(spouses))
spouses
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
print()%>%
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #the parent of your children
unlist()%>%names()%>% print()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
children
neighborhood(graph =MCMC_graph,nodes = names(unlist(children)), order = 1,mode = "out")
names(unlist(children))
neighborhood(graph =MCMC_graph,nodes = names(unlist(children))[-1], order = 1,mode = "out")
mb(MCMC_graph,c("GAST"))
chilren
children
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
print()%>%
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% print()%>% #the parent of your children
unlist()%>%names()%>% print()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
neighborhood(graph =MCMC_graph,nodes = names(unlist(children))[-1], order = 1,mode = "out")
children
igraph::neighborhood(graph, children, order = 1, mode = "in")
igraph::neighborhood(graph, names(unlist(children))[-1],order = 1, mode = "in")
children
names(unlist(children))[-1]
igraph::neighborhood(MCMC_graph, names(unlist(children))[-1],order = 1, mode = "in")
mb(MCMC_graph,c("GAST"))
neighborhood(graph =MCMC_graph,nodes = names(unlist(children))[-1], order = 1,mode = "in")
children
# The markov blanket should include the the parent, children, and the spouse
mb <- function(graph, nodes = igraph::V(graph)) {
lapply(
seq_along(nodes),
function(i) {
nodes_out <- igraph::neighborhood(
graph,
nodes[[i]],
order = 1,
mode = "out"
)[[1]] %>% unlist()%>%names()%>%
setdiff(nodes[[i]]) %>% ## children
#print()%>%
igraph::neighborhood(graph, ., order = 1, mode = "in") %>% #print()%>% #the parent of your children
unlist()%>%names()#%>% print()
#parents
igraph::neighborhood(graph, nodes[[i]], order = 1, mode = "in")[[1]] %>%unlist()%>%names()%>%
union(nodes_out) %>%
setdiff(nodes[[i]])
}
)
}
mb(MCMC_graph,c("GAST"))
makrb<-mb(MCMC_graph,c("GAST"))
unique(makrb)
unique(makrb[[1]])
makrb<-mb(MCMC_graph,c("GAST"))
makrb
unique(makrb[[1]])
for (p in parent){
parent_nodes<-rownames(MCMC)[as.vector(p)]
for (c in children){
children_nodes<-rownames(MCMC)[as.vector(c)]
spouses<-neighborhood(graph =MCMC_graph,nodes = c, order = 1,mode = "in")
#spouses[which.min(lengths(spouses))]
list<-NULL
for (s in spouses){
spouse_nodes<-rownames(MCMC)[as.vector(s)]
spouse_nodes<-setdiff(spouse_nodes,nodes)
print("List")
List<-unique(c(parent_nodes,spouse_nodes,children_nodes))
list<-c(list,List)
}
}
}
list<-unique(list)
list
mb(MCMC_graph,c("GAST"))
mkb<-mb(MCMC_graph,c("GAST"))
subgraph(MCMC_graph, mkb[[1]])
subgraph<-subgraph(MCMC_graph, mkb[[1]])
subgraph<-subgraph(MCMC_graph, mkb[[1]])
plot(subgraph)
plot(subgraph,layout=layout_with_fr)
plot(subgraph,layout=layout.circle)
MCMC_graph
mkb<-mb(MCMC_graph,c("B2M"))
subgraph<-subgraph(MCMC_graph, mkb[[1]])
plot(subgraph,layout=layout.circle)
plot(subgraph,layout=layout.circle,vertex.shape="none")
plot(subgraph,layout=layout.circle,vertex.shape="none",vertex.label.font=1)
plot(subgraph,layout=layout.circle,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=layout_randomly,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=subgraph,vertex.shape="none",vertex.label.font=0.8)
l <- layout_with_fr(subgraph)
plot(subgraph,layout=subgraph,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=l,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=circle,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=layout_with_graphopt,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=layout_with_graphopt,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.8)
plot(subgraph,layout=layout_with_graphopt,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.5)
plot(subgraph,layout=layout_with_graphopt,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=layout_with_fr,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=kk,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=circle,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=layout_with_kk,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=layout_with_circle,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=layout_with_gem,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout_with_gem,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
dev.off()
plot(subgraph,layout=ayout.circle,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.shape="none",vertex.label.font=0.4)
dev.off()
V(subgraph)$color
igraph::plot
plot
V(subgraph)$color<-"SkyBlue2"
V(subgraph)$color
V(subgraph)
subgraph<-subgraph(MCMC_graph, c(mkb[[1]],nodes)
V(subgraph)$color<-"SkyBlue2"
V(subgraph)$color
vertex.color=V(g)$color)
subgraph<-subgraph(MCMC_graph, c(mkb[[1]],nodes))
V(subgraph)$color<-"SkyBlue2"
V(subgraph)$color
V(subgraph)
nodes
V(subgraph)=="GAST"
V(subgraph)$color[V(subgraph)==nodes]<-"red"
V(subgraph)$color
V(subgraph)$color[V(subgraph)==nodes]<-"red"
V(subgraph)$color
V(subgraph)==nodes
which(V(subgraph)==nodes)
which(V(subgraph)==nodes)
V(subgraph)$color
V(subgraph)
V(subgraph)==nodes
V(subgraph)$names==nodes
V(subgraph)$name==nodes
V(subgraph)$color[V(subgraph)$name==nodes]
V(subgraph)$color[V(subgraph)$name==nodes]<-"red"
V(subgraph)$color
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.color=V(subgraph)$color),vertex.shape="none",vertex.label.font=0.4)
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
V(subgraph)$color
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
V(subgraph)$color<-"Navy"
V(subgraph)$color[V(subgraph)$name==nodes]<-"red"
V(subgraph)$color
V(subgraph)$color
V(subgraph)==nodes
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
plot(subgraph,vertex.label.dist = 3.5,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout.circle,edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout_as_star(subgraph),edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout_with_kk(subgraph),edge.arrow.size = 0.2,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout_with_kk(subgraph),edge.arrow.size = 0.3,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
mkb<-mb(MCMC_graph,nodes)
nodes="B2M"
mkb<-mb(MCMC_graph,nodes)
subgraph<-subgraph(MCMC_graph, c(mkb[[1]],nodes))
V(subgraph)$color<-"Navy"
V(subgraph)$color[V(subgraph)$name==nodes]<-"red"
V(subgraph)$color
V(subgraph)$color
V(subgraph)==nodes
pdf("/Users/yaoyuelin/Desktop/graph.pdf")
plot(subgraph,layout=layout_with_kk(subgraph),edge.arrow.size = 0.3,vertex.label.color=V(subgraph)$color,vertex.shape="none",vertex.label.font=0.4)
dev.off()
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
text = tags$span(
tags$h3("Explore cell states by Stator", style = "color: #337ab7;"),
tags$b("Stator",style = "color: #337ab7;"),  "takes in scRNA-seq count matrix, estimates higher-order gene interactions and defines cell states. Here we show how to use results from Stator to explore cell states.",
tags$br(),
tags$h4("Data Visualization &  Analysis", style="color: #337ab7;"),
tags$li("Table - A summary statistics for deviating states.", style="list-style-type: square;"),
tags$li("Heatmaps Cells - Over-representation test for MFIs and other external cell annotations.", style="list-style-type: square;"),
tags$li("Heatmaps Genes - Over-representation test for cell-state genes and external gene annotations.", style="list-style-type: square;"),
tags$li("GO & KEGG for genes in each state.", style="list-style-type: square;"),
tags$li("rrvgo - Simplifying the redundance of GO sets.", style="list-style-type: square;"),
tags$li("Upset Plot - Visualisation of how many cells sharing among states.", style="list-style-type: square;"),
tags$li("DE analysis - Differential expression analysis for two mutually exclusive states.", style="list-style-type: square;"),
tags$br(),
##Tutorial
tags$h4("Tutorial", style="color: #337ab7;"),
tags$b("Prepare and upload the dataset",style = "color: #337ab7;"),
tags$br(),
"The input files include:",
tags$li("Count_matrix.csv: count matrix of scRNA-seq data, the same file indicated in the rawDataPath of Stator's JSON file", style="list-style-type: square;"),
tags$li("Meta_data.csv: cell type annotations from other tools (e.g., clustering, NMFs, two coloum csv file, example in ./data folder), is only used in the overrepresentation test heatmap (heatmap-cell tabs), if you don't want to plot this heatmap, you can skip this file", style="list-style-type: square;"),
tags$li("topDeviatingHOIstates.csv: located in the output from stator pipeline (HOIsummaries folder)", style="list-style-type: square;"),
tags$li("trainingData_.csv: which is also in the output from stator pipeline (output folder)", style="list-style-type: square;"),
tags$li("GeneAnnotationSet.csv (optional): which is also in the output from stator pipeline (output folder)", style="list-style-type: square;"),
"The example of file can be found at: ",a(icon("house"), href="https://github.com/YuelinYao/MFIs/tree/main/data", target="_blank", style = "color: steelblue;"),
html = TRUE)
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
ALL_genes=F
!ALL_genes
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
if (ALL_genes==F){
Genes_set<- Genes_set[!grepl("_0", Genes_set)] # remove 0-state genes
}
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
