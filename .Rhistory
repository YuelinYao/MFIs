qvalueCutoff = 0.05,
readable = TRUE)
if (dim(cluster_GOBP)[1]==0) {
print("no result")
}
if (dim(cluster_GOBP@result)[1]==0) {
print("no result")
}
cluster_GOBP
is.null(cluster_GOBP)
if (is.null(cluster_GOBP)) {
print("no result")
}
cluster_GOBP<-NULL
cluster_GOBP
rbind(cluster_GOBP,1)
cluster_GOBP <- enrichGO(gene = c("14938","20304"),
OrgDb= "org.Mm.eg.db",
ont = "BP",
pAdjustMethod = "BH",
minGSSize = 1,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
cluster_GO<-cluster_GO[cluster_GO$p.adjust<0.05,]
c
cluster_GOBP<-cluster_GOBP[cluster_GOBP$p.adjust<0.05,]
cluster_GOBP
library(rrvgo)
simMatrix <- calculateSimMatrix(cluster_GO$ID,
orgdb=go_species,
ont=subclass,
method="Rel")
simMatrix <- calculateSimMatrix(cluster_GO$ID,
orgdb="org.Mm.eg.db",
ont="BP",
method="Rel")
simMatrix <- calculateSimMatrix(cluster_GOBP$ID,
orgdb="org.Mm.eg.db",
ont="BP",
method="Rel")
scores <- setNames(-log10(cluster_GO$qvalue), cluster_GO$ID)
scores <- setNames(-log10(cluster_GOBP$qvalue), cluster_GOBP$ID)
scores
simMatrix
cluster_GOBP$ID
scores <- setNames(-log10(cluster_GOBP$qvalue), cluster_GOBP$ID)
scores
cluster_GOBP$qvalue
cluster_GOBP
is.na(cluster_GOBP$qvalue)
any(is.na(cluster_GOBP$qvalue))
any(is.na(cluster_GOBP$qvalue))
library(Seurat)
library(SeuratDisk)
Convert("/Users/yaoyuelin/Downloads/Full_obj_log_counts_soupx_v2.h5ad", dest = "h5seurat")
Convert("/Users/yaoyuelin/Downloads/Full_obj_log_counts_soupx_v2.h5ad", dest = "h5seurat")
devtools::install_github("zhanghao-njmu/SCP")
library(SCP)
devtools::install_github("zhanghao-njmu/SCP")
library(SCP)
Convert("/Users/yaoyuelin/Downloads/Full_obj_log_counts_soupx_v2.h5ad", dest = ".h5seurat")
library(loomR)
data("pbmc3k.final")
InstallData("pbmc3k")
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
devtools::install_github("zhanghao-njmu/SCP")
devtools::install_github("zhanghao-njmu/SCP")
library(SCP)
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
#https://www.waltermuskovic.com/2021/04/15/seurat-s-addmodulescore-function/
load("/Users/yaoyuelin/Desktop/LIHC/LIHC.Rdata")
load("/Users/yaoyuelin/Desktop/LIHC/NMF_score_rand.Rdata")
# 1. Binary the matrix
count<-Merge@assays[["RNA"]]@counts
count<-as.matrix(count)
#count<-count[gene,]
count<-t(count)
count[count>0]<-1
count[count==0]<-0
count[1:10,1:10]
cutoff=0.95
cutoff=0.95
print(paste0("Cutoff: ",cutoff))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(meta_data$state))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(meta_data$state)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,length(unique(unique(meta_data$state))))
names(P_set)<-unique(meta_data$state)
for (ct in unique(meta_data$state)){
cell_types<-colnames(Merge)[which(meta_data$state==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
library(Seurat)
library(stringr)
library(pheatmap)
cutoff=0.95
print(paste0("Cutoff: ",cutoff))
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(meta_data$state))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(meta_data$state)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,length(unique(unique(meta_data$state))))
names(P_set)<-unique(meta_data$state)
for (ct in unique(meta_data$state)){
cell_types<-colnames(Merge)[which(meta_data$state==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
Data_mtrix
table(Data_mtrix==0)
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
Data_mtrix
Data_mtrix[Data_mtrix==0]<-2.2e-16
Data_mtrix_log<--log10(Data_mtrix)
Data_mtrix
dim(Data_mtrix)
Data_mtrix_log
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
breaksList = seq(0, 10, by = 1)
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
Data_mtrix_log
Data_mtrix_log[,order(colnames(Data_mtrix_log))]
colnames(Data_mtrix_log)<-as.numeric(colnames(Data_mtrix_log))
Data_mtrix_log[,order(colnames(Data_mtrix_log))]
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
Data_mtrix_log
order(colnames(Data_mtrix_log))
Data_mtrix_log<-Data_mtrix_log[,order(colnames(Data_mtrix_log))]
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
Mydata_raw_m
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
Data_mtrix
Data_mtrix[Data_mtrix==0]<-2.2e-16
Data_mtrix_log<--log10(Data_mtrix)
Data_mtrix
Mydata_raw_m
Data_mtrix_log
is.infinite(Data_mtrix) %>% table()
rowSums(Data_mtrix_log)
breaksList = seq(0, 10, by = 1)
width=dim(Data_mtrix_log)[2]/188
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
pheatmap(width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf") ,border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
Devstates$dev<-as.numeric(Devstates$dev)
Devstates$cluster<-as.numeric(Devstates$cluster)
Devstates$pval<-as.numeric(Devstates$pval)
Devstates<-Devstates[order(Devstates$cluster),]
Devstates<-Devstates[,-1]
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(meta_data$state))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(meta_data$state)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,length(unique(unique(meta_data$state))))
names(P_set)<-unique(meta_data$state)
for (ct in unique(meta_data$state)){
cell_types<-colnames(Merge)[which(meta_data$state==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
Devstates$dev<-as.numeric(Devstates$dev)
Devstates$cluster<-as.numeric(Devstates$cluster)
Devstates$pval<-as.numeric(Devstates$pval)
Devstates<-Devstates[order(Devstates$cluster),]
Devstates<-Devstates[,-1]
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(meta_data$state))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(meta_data$state)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,length(unique(unique(meta_data$state))))
names(P_set)<-unique(meta_data$state)
for (ct in unique(meta_data$state)){
cell_types<-colnames(Merge)[which(meta_data$state==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
Devstates
Genes<-str_split(Genes, "_")[[1]]
Genes
Genes<-cluster$genes[c]
Genes
Genes[1]
Devstates<-read.csv(paste0('/Users/yaoyuelin/Desktop/LIHC/Dendrogram_v1/',cutoff,'_devStates.csv'),colClasses = c("character"))
Devstates
Devstates$dev<-as.numeric(Devstates$dev)
Devstates$cluster<-as.numeric(Devstates$cluster)
Devstates$pval<-as.numeric(Devstates$pval)
Devstates<-Devstates[order(Devstates$cluster),]
#Devstates<-Devstates[,-1]
print(paste0("The number of clusters: ",length(unique(Devstates$cluster))))
r=length(unique(meta_data$state))
col=length(unique(Devstates$cluster))
col
Data_mtrix<-array(data=NA,dim = c(r,col))
Devstates$cluster<-paste0("C:",(Devstates$cluster))
colnames(Data_mtrix)<-unique(Devstates$cluster)
Data_mtrix
rownames(Data_mtrix)<-unique(meta_data$state)
Data_mtrix
for (i in unique(Devstates$cluster)){
print(i)
cluster<-Devstates[Devstates$cluster==i,]
print(paste0("Cluster: ",i))
Cell<-NULL
for (c in 1:length(cluster$X)){
print(paste0("Cell states: ",cluster$genes[c]))
Genes<-cluster$genes[c]
Genes<-gsub("HLADRA","HLA-DRA",Genes)
Genes<-str_split(Genes, "_")[[1]]
print(length(Genes))
state<-cluster$state[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
print(State)
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
P_set=rep(NA,length(unique(unique(meta_data$state))))
names(P_set)<-unique(meta_data$state)
for (ct in unique(meta_data$state)){
cell_types<-colnames(Merge)[which(meta_data$state==ct)]
q=length(intersect(Cell,cell_types))-1
m=length(Cell)
n=14698-m
k=length(cell_types)
p_value<-phyper(q, m, n, k, lower.tail = FALSE, log.p = FALSE) #https://www.biostars.org/p/15548/
P_set[ct]=p_value
}
Data_mtrix[,i]<-P_set
}
table(Data_mtrix==0)
Mydata_raw_FDR <- p.adjust(Data_mtrix,method = "BH")
Mydata_raw_FDR[Mydata_raw_FDR<=0.05] <- "*"
#Mydata_raw_FDR[Mydata_raw_FDR>0.1&Mydata_raw_FDR<=0.2] <- "."
Mydata_raw_FDR[Mydata_raw_FDR>0.05] <- " "
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
Mydata_raw_m
Data_mtrix
Data_mtrix[Data_mtrix==0]<-2.2e-16
Data_mtrix_log<--log10(Data_mtrix)
Data_mtrix
dim(Data_mtrix)
Mydata_raw_m
Data_mtrix_log
is.infinite(Data_mtrix) %>% table()
rowSums(Data_mtrix_log)
breaksList = seq(0, 10, by = 1)
width=dim(Data_mtrix_log)[2]/188
colnames(Data_mtrix_log)<-gsub(pattern = "C:","",colnames(Data_mtrix_log))
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
dev.new()
#width =25*width+5,height = 5, filename =paste0("/Users/yaoyuelin/Desktop/LIHC/NMF_Heatmaps/NMF_p-value_",cutoff,"_heatmap.pdf")
pheatmap(border_color = NA,Data_mtrix_log,display_numbers = Mydata_raw_m,fontsize = 12,fontsize_number = 15,fontsize_row = 15,cluster_cols = T,cluster_rows = T,color = colorRampPalette(c("white","firebrick3"))(10),breaks = breaksList)
runGitHub( "MFIs", "YuelinYao")
runGitHub()
library(shiny)
runGitHub( "MFIs", "YuelinYao")
sessionInfo()
sessionInfo()
runGitHub( "MFIs", "YuelinYao")
library(shiny)
runGitHub( "MFIs", "YuelinYao")
sessionInfo()
library(import)
Sys.getenv('RETICUALTE_PYTHON')
library(reticulate)
reticulate::py_config()
runGitHub("MFIs","YuelinYao")
library(shiny)
runGitHub("MFIs","YuelinYao")
runGitHub("MFIs","YuelinYao")
runGitHub("MFIs","YuelinYao")
library(shiny)
profvis({
runApp('~/Downloads/MFIs')
})
library(profvis)
library(shiny)
profvis({
runApp('~/Downloads/MFIs')
})
renv::init()
install.packages("renv")
renv::init()
getwd()
setwd('~/Downloads/MFIs')
renv::init()
renv::snapshot()
runGitHub("MFIs","YuelinYao")
getwd()
Sys.getenv('VIRTUALENV_NAME')
runApp()
Sys.info()[['user']]
Sys.getenv('PYTHON_PATH')
runApp()
reticulate::py_config()
runApp()
file.edit(".Rprofile")
runApp()
reticulate::virtualenv_create()
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_create()
runApp()
# ====== import R libraries: ####
# Some initial setup:
library(BiocManager)
options(repos = BiocManager::repositories())
usethis::edit_r_profile()
Sys.getenv('VIRTUALENV_NAME')
Sys.getenv()
runApp()
