row_matches <- apply(gene_values == state_vector, 1, all)
})
colnames(binReps1)<-devStates$genes
binReps1
binReps
trainDat
devStates
gene_cols <- match(strsplit(devStates$genes, "_"), colnames(trainDat))
gene_cols
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print("genevalue")
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
devStates
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print("genevalue")
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
binReps1
colnames(binReps1)<-devStates$genes
binReps1
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- as.numeric(trainDat[,str_split(x['genes'], "_")[[1]]])
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
print(row_matches)
})
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
binReps1
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
print(gene_values == state_vector)
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(class(gene_values))
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(clas(state_vector))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(class(gene_values))
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(class(state_vector))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
devStates
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(as.numeric(gene_values) == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(class(gene_values[1,1]))
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
gene_values<-as.data.frame(gene_values )
print(gene_values == state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
gene_values<-as.data.frame(gene_values )
print(state_vector==gene_values)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, all)
#row_matches <- apply(gene_values, 1, function(row) all(as.numeric(row) == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
print(row_matches)
})
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
#print(gene_values==state_vector)
#row_matches <- apply(gene_values == state_vector, 1, all)
#row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
print(row_matches)
})
#print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, print)
#print(gene_values==state_vector)
row_matches <- apply(gene_values == state_vector, 1, print(gene_values == state_vector))
# Apply the function to each row of devStates to get a matrix of Boolean values
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
print(x['genes'])
print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
print("state_vector")
print(state_vector)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
#row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
print(row_matches)
})
binReps1
colnames(binReps1)<-devStates$genes
binReps1
binReps
trainDat
count[1:10,1:10]
setwd("/Users/yaoyuelin/Desktop/test")
library(data.table)
library(stringr)
Meta_data<-read.csv("/Users/yaoyuelin/Desktop/test/Meta_Data.csv",row.names = 1,colClasses = "character")
colnames(Meta_data)<-c("Cell_States","Cell_Types")
Meta_data
table(Meta_data$Cell_Types)
count<-as.matrix(fread("Count_matrix.csv"),rownames=1)
count[count>0]<-1
count[count==0]<-0
count[1:10,1:10]
colnames(count)
#count[cellnames,Genes]
Devstates
Devstates<-read.csv("State_Table 2023-01-27.csv",colClasses = c("character")) # download from table tab dice distance: 0.8
colnames(Devstates)<-c("X","genes","state","Dev","Pval","Cluster")
devStates<-Devstates
trainDat<-count
# Apply the function to each row of devStates to get a matrix of Boolean values
system.time(binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
#print(x['genes'])
#print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
#print("state_vector")
#print(state_vector)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
#row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
#print(row_matches)
})
)
# Apply the function to each row of devStates to get a matrix of Boolean values
system.time({
binReps1 <- apply(devStates, 1, function(x) {
gene_values <- trainDat[,str_split(x['genes'], "_")[[1]]]
#print(x['genes'])
#print(gene_values)
state_vector <- as.numeric(strsplit(as.character(x['state']),"")[[1]])
#print("state_vector")
#print(state_vector)
row_matches <- apply(gene_values, 1, function(row) all(row == state_vector, na.rm = TRUE))
#row_matches <- apply(gene_values, 1, function(row) print(row == state_vector))
#print(row_matches)
})
})
Devstates<-read.csv("State_Table 2023-01-27.csv",colClasses = c("character")) # download from table tab dice distance: 0.8
print("Get cells in each state")
List=NULL
system.time({
print("Get cells in each state")
List=NULL
for (i in unique(Devstates$Cluster)){
cluster<-Devstates[Devstates$Cluster==i,]
Cell<-NULL
for (c in 1:length(cluster$Genes)){
Genes<-cluster$Genes[c]
Genes<-str_split(Genes, "_")[[1]]
state<-cluster$D.tuple[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else if ( length(Genes)==6){
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
} else if ( length(Genes)==7) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]),]
} else if ( length(Genes)==8) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]),]
} else if ( length(Genes)==9) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]&count[,Genes[10]]==State[10]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
list=list(Cell)
names(list)<-paste0("cluster_",i)
List<-c(List,list)
}
lengths(List)
)
})
system.time({
print("Get cells in each state")
List=NULL
for (i in unique(Devstates$Cluster)){
cluster<-Devstates[Devstates$Cluster==i,]
Cell<-NULL
for (c in 1:length(cluster$Genes)){
Genes<-cluster$Genes[c]
Genes<-str_split(Genes, "_")[[1]]
state<-cluster$D.tuple[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else if ( length(Genes)==6){
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
} else if ( length(Genes)==7) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]),]
} else if ( length(Genes)==8) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]),]
} else if ( length(Genes)==9) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]&count[,Genes[10]]==State[10]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
list=list(Cell)
names(list)<-paste0("cluster_",i)
List<-c(List,list)
}
lengths(List)
})
lengths(List)
Devstates$Cluster
Devstates$Cluster<-c(1:nrow(Devstates))
system.time({
print("Get cells in each state")
List=NULL
for (i in unique(Devstates$Cluster)){
cluster<-Devstates[Devstates$Cluster==i,]
Cell<-NULL
for (c in 1:length(cluster$Genes)){
Genes<-cluster$Genes[c]
Genes<-str_split(Genes, "_")[[1]]
state<-cluster$D.tuple[c]
State<-as.numeric(strsplit(as.character(state),"")[[1]])
if ( length(Genes)==3 ) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]),]
} else if ( length(Genes)==4) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]),]
} else if ( length(Genes)==5) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]),]
} else if ( length(Genes)==6){
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]),]
} else if ( length(Genes)==7) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]),]
} else if ( length(Genes)==8) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]),]
} else if ( length(Genes)==9) {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]),]
} else {
c1<-count[which(count[,Genes[1]]==State[1]&count[,Genes[2]]==State[2]&count[,Genes[3]]==State[3]&count[,Genes[4]]==State[4]&count[,Genes[5]]==State[5]&count[,Genes[6]]==State[6]&count[,Genes[7]]==State[7]&count[,Genes[8]]==State[8]&count[,Genes[9]]==State[9]&count[,Genes[10]]==State[10]),]
}
cellnames<-rownames(c1)
Cell<-c(Cell,cellnames)
}
Cell<-unique(Cell)
list=list(Cell)
names(list)<-paste0("cluster_",i)
List<-c(List,list)
}
lengths(List)
})
lengths(List)
binReps1[1:10,1:10]
dim(binReps1)
binReps1<-binReps1*1
binReps1[1:10,1:10]
colSums(binReps1)
lengths(List)
shiny::runApp('~/Downloads/MFIs')
runApp('~/Downloads/MFIs')
