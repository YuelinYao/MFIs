p
sub_set<-filtered_data[,filtered_data$Group%in%groups]
color_sub<-color[names(color)%in%groups]
p<-DimPlot(sub_set , reduction = "umap",ncol = 2)+scale_color_manual(values=color_sub)+theme(strip.text = element_text(size=10))
p
sub_set <- FindNeighbors(sub_set, dims = 1:15)
sub_set <- FindClusters(sub_set, resolution = 0.5)
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )+theme_blank() #Paired
p
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
pancreas_sub <- RunCellQC(srt = sub_set)
CellDimPlot(srt = pancreas_sub, group.by = "CellQC", reduction = "UMAP")
ClassDimPlot(srt = pancreas_sub, group.by = "CellQC", reduction = "UMAP")
rm(list=ls())
library(condiments)
library(Seurat)
library(ggplot2)
library(SingleCellExperiment)
library(rjson)
library(SingleR)
library(celldex)
library(dittoSeq)
#BiocManager::install("SingleR")
#BiocManager::install("celldex")
theme_set(theme_classic())
#BiocManager::install("SingleR")
#BiocManager::install("celldex")
theme_set(theme_blank())
load("/Users/yaoyuelin/Desktop/seb/Updates/filtered_data_normalised.Rdata")
library(celldex)
library(SingleR)
library(SingleCellExperiment)
library(tidyverse)
library(RColorBrewer)
library(Seurat)
library(SeuratData)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(Orthology.eg.db)
library(dplyr)
fun2 <- function(gns){
egs <- mapIds(org.Hs.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- select(Orthology.eg.db, egs,"Mus.musculus","Homo.sapiens")
mapped$MUS <- mapIds(org.Mm.eg.db, as.character(mapped$Mus.musculus), "SYMBOL", "ENTREZID")
return(as.character(mapped$MUS))
}
fun2 <- function(gns){
egs <- mapIds(org.Hs.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- select(Orthology.eg.db, egs,"Mus.musculus","Homo.sapiens")
mapped$MUS <- mapIds(org.Mm.eg.db, as.character(mapped$Mus.musculus), "SYMBOL", "ENTREZID")
return(as.character(mapped$MUS))
}
Stem<-c('Lgr5', 'Ascl2', 'Slc12a2', 'Axin2', 'Olfm4', 'Gkn3')
Enterocyte_Proximal<- c('Gsta1','Rbp2','Adh6a','Apoa4','Reg3a','Creb3l3','Cyp3a13','Cyp2d26','Ms4a10','Ace','Aldh1a1','Rdh7','H2-Q2', 'Hsd17b6','Gstm3','Gda','Apoc3','Gpd1','Fabp1','Slc5a1','Mme','Cox7a1','Gsta4','Lct','Khk','Mttp','Xdh','Sult1b1', 'Treh','Lpgat1','Dhrs1','Cyp2c66','Ephx2','Cyp2c65','Cyp3a25','Slc2a2','Ugdh','Gstm6','Retsat','Ppap2a','Acsl5', 'Cyb5r3','Cyb5b','Ckmt1','Aldob','Ckb','Scp2','Prap1')
Enterocyte_Distal<- c('Tmigd1','Fabp6','Slc51b','Slc51a','Mep1a','Fam151a','Naaladl1','Slc34a2','Plb1','Nudt4','Dpep1','Pmp22','Xpnpep2','Muc3','Neu1','Clec2h','Phgr1','2200002D01Rik','Prss30','Cubn','Plec','Fgf15','Crip1','Krt20','Dhcr24','Myo15b','Amn','Enpep','Anpep','Slc7a9','Ocm','Anxa2','Aoc1','Ceacam20','Arf6','Abcb1a','Xpnpep1','Vnn1','Cndp2','Nostrin','Slc13a1','Aspa','Maf','Myh14')
Goblet<-c('Agr2', 'Fcgbp', 'Tff3', 'Clca1', 'Zg16', 'Tpsg1', 'Muc2', 'Galnt12', 'Atoh1', 'Rep15', 'S100a6', 'Pdia5', 'Klk1', 'Pla2g10', 'Spdef', 'Lrrc26', 'Ccl9', 'Bace2', 'Bcas1', 'Slc12a8', 'Smim14', 'Tspan13', 'Txndc5', 'Creb3l4', 'C1galt1c1', 'Creb3l1', 'Qsox1', 'Guca2a', 'Scin', 'Ern2', 'AW112010', 'Fkbp11', 'Capn9', 'Stard3nl', 'Slc50a1', 'Sdf2l1', 'Hgfa', 'Galnt7', 'Hpd', 'Ttc39a', 'Tmed3', 'Pdia6', 'Uap1', 'Gcnt3', 'Tnfaip8', 'Dnajc10', 'Ergic1', 'Tsta3', 'Kdelr3', 'Foxa3', 'Tpd52', 'Tmed9', 'Spink4', 'Nans', 'Cmtm7', 'Creld2', 'Tm9sf3', 'Wars', 'Smim6', 'Manf', 'Oit1', 'Tram1', 'Kdelr2', 'Xbp1', 'Serp1', 'Vimp', 'Guk1', 'Sh3bgrl3', 'Cmpk1', 'Tmsb10', 'Dap', 'Ostc', 'Ssr4', 'Sec61b', 'Pdia3', 'Gale', 'Klf4', 'Krtcap2', 'Arf4', 'Sep15', 'Ssr2', 'Ramp1', 'Calr', 'Ddos')
Paneth<-c('Gm15284', 'AY761184', 'Defa17', 'Gm14851', 'Defa22', 'Defa-rs1', 'Defa3', 'Defa24', 'Defa26', 'Defa21', 'Lyz1', 'Gm15292', 'Mptx2', 'Ang4')
Enteroendocrine<-c('Chgb', 'Gfra3', 'Cck', 'Vwa5b2', 'Neurod1', 'Fev', 'Aplp1', 'Scgn', 'Neurog3', 'Resp18', 'Trp53i11', 'Bex2', 'Rph3al', 'Scg5', 'Pcsk1', 'Isl1', 'Maged1', 'Fabp5', 'Celf3', 'Pcsk1n', 'Fam183b', 'Prnp', 'Tac1', 'Gpx3', 'Cplx2', 'Nkx2-2', 'Olfm1', 'Vim', 'Rimbp2', 'Anxa6', 'Scg3', 'Ngfrap1', 'Insm1', 'Gng4', 'Pax6', 'Cnot6l', 'Cacna2d1', 'Tox3', 'Slc39a2', 'Riiad1')
Tuft<-c('Alox5ap', 'Lrmp', 'Hck', 'Avil', 'Rgs13', 'Ltc4s', 'Trpm5', 'Dclk1',
'Spib', 'Fyb', 'Ptpn6', 'Matk', 'Snrnp25', 'Sh2d7', 'Ly6g6f', 'Kctd12',
'1810046K07Rik', 'Hpgds', 'Tuba1a', 'Pik3r5', 'Vav1', 'Tspan6', 'Skap2',
'Pygl', 'Ccdc109b', 'Ccdc28b', 'Plcg2', 'Ly6g6d', 'Alox5', 'Pou2f3',
'Gng13', 'Bmx', 'Ptpn18', 'Nebl', 'Limd2', 'Pea15a', 'Tmem176a', 'Smpx',
'Itpr2', 'Il13ra1', 'Siglecf', 'Ffar3', 'Rac2', 'Hmx2', 'Bpgm', 'Inpp5j',
'Ptgs1', 'Aldh2', 'Pik3cg', 'Cd24a', 'Ethe1', 'Inpp5d', 'Krt23', 'Gprc5c',
'Reep5', 'Csk', 'Bcl2l14', 'Tmem141', 'Coprs', 'Tmem176b', '1110007C09Rik',
'Ildr1', 'Galk1', 'Zfp428', 'Rgs2', 'Inpp5b', 'Gnai2', 'Pla2g4a', 'Acot7',
'Rbm38', 'Gga2', 'Myo1b', 'Adh1', 'Bub3', 'Sec14l1', 'Asah1', 'Ppp3ca', 'Agt',
'Gimap1', 'Krt18', 'Pim3', '2210016L21Rik', 'Tmem9', 'Lima1', 'Fam221a', 'Nt5c3',
'Atp2a3', 'Mlip', 'Vdac3', 'Ccdc23', 'Tmem45b', 'Cd47', 'Lect2', 'Pla2g16', 'Mocs2',
'Arpc5','Ndufaf3')
fun <- function(gns){
egs <- mapIds(org.Mm.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- AnnotationDbi::select(Orthology.eg.db, egs, "Homo.sapiens","Mus.musculus")
mapped$MUS <- mapIds(org.Hs.eg.db, as.character(mapped$Homo.sapiens), "SYMBOL", "ENTREZID")
return(mapped$MUS)
}
lapply(c("dplyr","Seurat","HGNChelper"), library, character.only = T)
# load gene set preparation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")
# load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
gs_list = gene_sets_prepare(db_, tissue)
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Intestine" # e.g. Immune system,Pancreas,Liver,Eye,Kidney,Brain,Lung,Adrenal,Heart,Intestine,Muscle,Placenta,Spleen,Stomach,Thymus
gs_list = gene_sets_prepare(db_, tissue)
gs_list
length(gs_list$gs_positive)
gs_list[["gs_positive"]]
filtered_data[["RNA"]]@scale.data[1:10,1:10]
gs_list$gs_positive
# get cell-type by cell matrix
es.max = sctype_score(scRNAseqData = filtered_data[["RNA"]]@scale.data, scaled = TRUE,
gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.
# In case Seurat is used, it is either filtered_data[["RNA"]]@scale.data (default), filtered_data[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or filtered_data[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.
es.max[1:10,1:10]
# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.
# In case Seurat is used, it is either filtered_data[["RNA"]]@scale.data (default), filtered_data[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or filtered_data[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.
es.max[1:10,1:10]
es.max
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(filtered_data@meta.data$seurat_clusters), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(filtered_data@meta.data[filtered_data@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(filtered_data@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
sctype_scores
# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
print(sctype_scores[,1:3])
filtered_data@meta.data$customclassif = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
filtered_data@meta.data$customclassif[filtered_data@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
library(ggsci)
#filtered_data$customclassif[filtered_data$customclassif=="Stem"]<-"Unknown"
p<-DimPlot(filtered_data, reduction = "umap", label = TRUE, repel = TRUE, group.by = 'customclassif')+scale_color_nejm()+NoAxes()+ggtitle("Cell types")
p
ClassDimPlot(
srt = filtered_data, group.by = "customclassif",
reduction = "UMAP", theme_use = "theme_blank"
)
gs_list
gs_list[["gs_positive"]][["Stem"]]<-fun(Stem)
gs_list[["gs_positive"]]
gs_list[["gs_positive"]][["Stem"]]<-fun(Stem)
gs_list[["gs_positive"]][["Enterocyte_Proximal"]]<-fun(Enterocyte_Proximal)
gs_list[["gs_positive"]][["Enterocyte_Distal"]]<-fun(Enterocyte_Distal)
gs_list[["gs_positive"]][["Goblet"]]<-fun(Goblet)
gs_list[["gs_positive"]][["Paneth"]]<-fun(Paneth)
gs_list[["gs_positive"]][["Enteroendocrine"]]<-fun(Enteroendocrine)
gs_list[["gs_positive"]][["Tuft"]]<-fun(Tuft)
filtered_data[["RNA"]]@scale.data[1:10,1:10]
gs_list$gs_positive
gs_list
fun(Stem)
fun <- function(gns){
egs <- mapIds(org.Mm.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- AnnotationDbi::select(Orthology.eg.db, egs, "Homo.sapiens","Mus.musculus")
mapped$MUS <- mapIds(org.Hs.eg.db, as.character(mapped$Homo.sapiens), "SYMBOL", "ENTREZID")
return(mapped$MUS)
}
fun <- function(gns){
egs <- mapIds(org.Mm.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- AnnotationDbi::select(Orthology.eg.db, egs, "Homo.sapiens","Mus.musculus")
mapped$MUS <- mapIds(org.Hs.eg.db, as.character(mapped$Homo.sapiens), "SYMBOL", "ENTREZID")
return(unlist(mapped$MUS))
}
fun(Stem)
gs_list[["gs_positive"]][["Stem"]]<-fun(Stem)
gs_list[["gs_positive"]][["Enterocyte_Proximal"]]<-fun(Enterocyte_Proximal)
gs_list[["gs_positive"]][["Enterocyte_Distal"]]<-fun(Enterocyte_Distal)
gs_list[["gs_positive"]][["Goblet"]]<-fun(Goblet)
gs_list[["gs_positive"]][["Paneth"]]<-fun(Paneth)
gs_list[["gs_positive"]][["Enteroendocrine"]]<-fun(Enteroendocrine)
gs_list[["gs_positive"]][["Tuft"]]<-fun(Tuft)
gs_list$gs_positive
gs_list = gene_sets_prepare(db_, tissue)
gs_list
fun <- function(gns){
egs <- mapIds(org.Mm.eg.db,gns, "ENTREZID","SYMBOL")
mapped <- AnnotationDbi::select(Orthology.eg.db, egs, "Homo.sapiens","Mus.musculus")
mapped$MUS <- mapIds(org.Hs.eg.db, as.character(mapped$Homo.sapiens), "SYMBOL", "ENTREZID")
return(as.vector(unlist(mapped$MUS)))
}
fun(Stem)
gs_list[["gs_positive"]][["Stem"]]<-fun(Stem)
gs_list[["gs_positive"]][["Enterocyte_Proximal"]]<-fun(Enterocyte_Proximal)
gs_list[["gs_positive"]][["Enterocyte_Distal"]]<-fun(Enterocyte_Distal)
gs_list[["gs_positive"]][["Goblet"]]<-fun(Goblet)
gs_list[["gs_positive"]][["Paneth"]]<-fun(Paneth)
Paneth<-c('Gm15284', 'AY761184', 'Defa17', 'Gm14851', 'Defa22', 'Defa-rs1', 'Defa3', 'Defa24', 'Defa26', 'Defa21', 'Lyz1', 'Gm15292', 'Mptx2', 'Ang4')
Enteroendocrine<-c('Chgb', 'Gfra3', 'Cck', 'Vwa5b2', 'Neurod1', 'Fev', 'Aplp1', 'Scgn', 'Neurog3', 'Resp18', 'Trp53i11', 'Bex2', 'Rph3al', 'Scg5', 'Pcsk1', 'Isl1', 'Maged1', 'Fabp5', 'Celf3', 'Pcsk1n', 'Fam183b', 'Prnp', 'Tac1', 'Gpx3', 'Cplx2', 'Nkx2-2', 'Olfm1', 'Vim', 'Rimbp2', 'Anxa6', 'Scg3', 'Ngfrap1', 'Insm1', 'Gng4', 'Pax6', 'Cnot6l', 'Cacna2d1', 'Tox3', 'Slc39a2', 'Riiad1')
Tuft<-c('Alox5ap', 'Lrmp', 'Hck', 'Avil', 'Rgs13', 'Ltc4s', 'Trpm5', 'Dclk1',
'Spib', 'Fyb', 'Ptpn6', 'Matk', 'Snrnp25', 'Sh2d7', 'Ly6g6f', 'Kctd12',
'1810046K07Rik', 'Hpgds', 'Tuba1a', 'Pik3r5', 'Vav1', 'Tspan6', 'Skap2',
'Pygl', 'Ccdc109b', 'Ccdc28b', 'Plcg2', 'Ly6g6d', 'Alox5', 'Pou2f3',
'Gng13', 'Bmx', 'Ptpn18', 'Nebl', 'Limd2', 'Pea15a', 'Tmem176a', 'Smpx',
'Itpr2', 'Il13ra1', 'Siglecf', 'Ffar3', 'Rac2', 'Hmx2', 'Bpgm', 'Inpp5j',
'Ptgs1', 'Aldh2', 'Pik3cg', 'Cd24a', 'Ethe1', 'Inpp5d', 'Krt23', 'Gprc5c',
'Reep5', 'Csk', 'Bcl2l14', 'Tmem141', 'Coprs', 'Tmem176b', '1110007C09Rik',
'Ildr1', 'Galk1', 'Zfp428', 'Rgs2', 'Inpp5b', 'Gnai2', 'Pla2g4a', 'Acot7',
'Rbm38', 'Gga2', 'Myo1b', 'Adh1', 'Bub3', 'Sec14l1', 'Asah1', 'Ppp3ca', 'Agt',
'Gimap1', 'Krt18', 'Pim3', '2210016L21Rik', 'Tmem9', 'Lima1', 'Fam221a', 'Nt5c3',
'Atp2a3', 'Mlip', 'Vdac3', 'Ccdc23', 'Tmem45b', 'Cd47', 'Lect2', 'Pla2g16', 'Mocs2',
'Arpc5','Ndufaf3')
gs_list[["gs_positive"]][["Paneth"]]<-fun(Paneth)
gs_list[["gs_positive"]][["Enteroendocrine"]]<-fun(Enteroendocrine)
gs_list[["gs_positive"]][["Tuft"]]<-fun(Tuft)
Paneth<-c('Gm15284', 'AY761184', 'Defa17', 'Gm14851', 'Defa22', 'Defa-rs1', 'Defa3', 'Defa24', 'Defa26', 'Defa21', 'Lyz1', 'Gm15292', 'Mptx2', 'Ang4')
gs_list$gs_positive
# get cell-type by cell matrix
es.max = sctype_score(scRNAseqData = filtered_data[["RNA"]]@scale.data, scaled = TRUE,
gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
es.max
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(filtered_data@meta.data$seurat_clusters), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(filtered_data@meta.data[filtered_data@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(filtered_data@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.
# In case Seurat is used, it is either filtered_data[["RNA"]]@scale.data (default), filtered_data[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or filtered_data[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.
filtered_data@meta.data$seurat_clusters
es.max
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(filtered_data@meta.data$seurat_clusters), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(filtered_data@meta.data[filtered_data@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(filtered_data@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
sctype_scores
# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
print(sctype_scores[,1:3])
filtered_data@meta.data$customclassif = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
filtered_data@meta.data$customclassif[filtered_data@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
library(ggsci)
ClassDimPlot(
srt = filtered_data, group.by = "customclassif",
reduction = "UMAP", theme_use = "theme_blank"
)
groups<-list[[i]]
i=4
compare1<-c("PDOp18_shSRSF1_AP20187","PDOp18_shSRSF1")
compare2<-c("PDOp18_shRenilla_AP20187","PDOp18_shRenilla")
compare3<-c("PDOp18_shSRSF1_AP20187","PDOp18_shRenilla_AP20187")
compare4<-c("PDOp18_shSRSF1","PDOp18_shRenilla")
list<-list(compare1,compare2,compare3,compare4)
sub_set<-filtered_data[,filtered_data$Group%in%groups]
Idents(filtered_data)<-filtered_data$Group
sub_set<-filtered_data[,filtered_data$Group%in%groups]
groups<-list[[i]]
print(groups)
sub_set<-filtered_data[,filtered_data$Group%in%groups]
color_sub<-color[names(color)%in%groups]
p<-DimPlot(sub_set , reduction = "umap",ncol = 2)+scale_color_manual(values=color_sub)+theme(strip.text = element_text(size=10))
p
sub_set <- FindNeighbors(sub_set, dims = 1:15)
sub_set <- FindClusters(sub_set, resolution = 0.5)
gs_list[["gs_positive"]]
gs_list[["gs_positive"]][["Stem"]]<-fun(Stem)
gs_list[["gs_positive"]][["Enterocyte_Proximal"]]<-fun(Enterocyte_Proximal)
gs_list[["gs_positive"]][["Enterocyte_Distal"]]<-fun(Enterocyte_Distal)
gs_list[["gs_positive"]][["Goblet"]]<-fun(Goblet)
gs_list[["gs_positive"]][["Paneth"]]<-Paneth #https://panglaodb.se/markers.html?cell_type=%27Paneth%20cells%27
gs_list[["gs_positive"]][["Enteroendocrine"]]<-fun(Enteroendocrine)
gs_list[["gs_positive"]][["Tuft"]]<-fun(Tuft)
sub_set[["RNA"]]@scale.data[1:10,1:10]
gs_list$gs_positive
# get cell-type by cell matrix
es.max = sctype_score(scRNAseqData = sub_set[["RNA"]]@scale.data, scaled = TRUE,
gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.
# In case Seurat is used, it is either filtered_data[["RNA"]]@scale.data (default), filtered_data[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or filtered_data[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.
sub_set@meta.data$seurat_clusters
# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.
# In case Seurat is used, it is either sub_set[["RNA"]]@scale.data (default), sub_set[["SCT"]]@scale.data, in case sctransform is used for normalization,
# or sub_set[["integrated"]]@scale.data, in case a joint analysis of multiple single-cell datasets is performed.
sub_set@meta.data$seurat_clusters
es.max
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(sub_set@meta.data$seurat_clusters), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(sub_set@meta.data[sub_set@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(sub_set@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
sctype_scores
# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
print(sctype_scores[,1:3])
sub_set@meta.data$customclassif = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
sub_set@meta.data$customclassif[sub_set@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
sctype_scores$ncells
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
sub_set@meta.data$customclassif[sub_set@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
library(ggsci)
ClassDimPlot(
srt = sub_set, group.by = "customclassif",
reduction = "UMAP", theme_use = "theme_blank"
)
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set<- RunPAGA(
srt = sub_set, group_by = "seurat_clusters",
linear_reduction = "PCA", nonlinear_reduction = "UMAP"
)
SCP::PrepareEnv()
SCP::PrepareEnv()
renv::install("zhanghao-njmu/SCP", repos = BiocManager::repositories())
library(Matrix)
ClassDimPlot(
srt = sub_set, group.by = "customclassif",
reduction = "UMAP", theme_use = "theme_blank"
)
p<-DimPlot(sub_set, reduction = "umap", label = TRUE, repel = TRUE, group.by = 'customclassif')
p
ClassDimPlot(
srt = sub_set, group.by = "customclassif",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP")
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",theme_use = "theme_blank")
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP")+theme_blank()
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )+theme_blank() #Paired
p
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )
p
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP")+theme_blank()
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",start = 7)
ggsave("/Users/yaoyuelin/Desktop/slingshot.pdf")
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )
p
library(ggplot2)
p<-DimPlot(sub_set , reduction = "umap",ncol = 2)+scale_color_manual(values=color_sub)+theme(strip.text = element_text(size=10))
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )
p
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )+theme_classic()
p
FeatureDimPlot(sub_set, features = paste0("Lineage", 1:3), reduction = "UMAP", theme_use = "theme_blank")
ClassDimPlot(sub_set, features = paste0("Lineage", 1:3), reduction = "UMAP", theme_use = "theme_blank")
DimPlot(sub_set, features = paste0("Lineage", 1:3), reduction = "UMAP", theme_use = "theme_blank")
FeatureDimPlot(sub_set, features = paste0("Lineage", 1:3), reduction = "UMAP", theme_use = "theme_blank")
CellDimPlot(sub_set, group.by = "seurat_clusters", reduction = "UMAP", lineages = paste0("Lineage", 1:3), lineages_span = 0.1)
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",start = 7)
sub_set <- RunDynamicFeatures(srt = sub_set, lineages = c("Lineage2", "Lineage3"), n_candidates = 200)
ht <- DynamicHeatmap(
srt = pancreas_sub, lineages = c("Lineage2", "Lineage3"),
use_fitted = TRUE, n_split = 6, reverse_ht = "Lineage2",
species = "Homo_sapiens", db = "GO_BP", anno_terms = TRUE, anno_keys = TRUE, anno_features = TRUE,
heatmap_palette = "viridis", cell_annotation = "seurat_clusters",
#separate_annotation = list("seurat_clusters", c("Nnat", "Irx1")), separate_annotation_palette = c("Paired", "Set1"),
feature_annotation = c("TF", "SP"), feature_annotation_palcolor = list(c("gold", "steelblue"), c("forestgreen")),
pseudotime_label = 25, pseudotime_label_color = "red",
height = 5, width = 2
)
ht <- DynamicHeatmap(
srt = pancreas_sub, lineages = c("Lineage2", "Lineage3"),
use_fitted = TRUE, n_split = 6, reverse_ht = "Lineage2",
species = "Homo_sapiens", db = "GO_BP", anno_terms = TRUE, anno_keys = TRUE, anno_features = TRUE,
heatmap_palette = "viridis", cell_annotation = "seurat_clusters",
#separate_annotation = list("seurat_clusters", c("Nnat", "Irx1")), separate_annotation_palette = c("Paired", "Set1"),
feature_annotation = c("TF", "SP"), #feature_annotation_palcolor = list(c("gold", "steelblue"), c("forestgreen")),
pseudotime_label = 25, pseudotime_label_color = "red",
height = 5, width = 2
)
ht <- DynamicHeatmap(
srt = sub_set, lineages = c("Lineage2", "Lineage3"),
use_fitted = TRUE, n_split = 6, reverse_ht = "Lineage2",
species = "Homo_sapiens", db = "GO_BP", anno_terms = TRUE, anno_keys = TRUE, anno_features = TRUE,
heatmap_palette = "viridis", cell_annotation = "seurat_clusters",
#separate_annotation = list("seurat_clusters", c("Nnat", "Irx1")), separate_annotation_palette = c("Paired", "Set1"),
feature_annotation = c("TF", "SP"), #feature_annotation_palcolor = list(c("gold", "steelblue"), c("forestgreen")),
pseudotime_label = 25, pseudotime_label_color = "red",
height = 5, width = 2
)
ht <- DynamicHeatmap(
srt = sub_set, lineages = c("Lineage2", "Lineage3"),
use_fitted = TRUE, n_split = 6, reverse_ht = "Lineage2",
species = "Homo_sapiens", db = "GO_BP", anno_terms = TRUE, anno_keys = TRUE, anno_features = TRUE,
heatmap_palette = "viridis", cell_annotation = "seurat_clusters",
#separate_annotation = list("seurat_clusters", c("Nnat", "Irx1")), separate_annotation_palette = c("Paired", "Set1"),
#feature_annotation = c("TF", "SP"), #feature_annotation_palcolor = list(c("gold", "steelblue"), c("forestgreen")),
pseudotime_label = 25, pseudotime_label_color = "red",
height = 5, width = 2
)
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",start = 7)
rm(list=ls())
library(Seurat)
library(sctransform)
#library(randomcoloR)
library(dplyr)
library(ggplot2)
library(biomaRt)
library(org.Hs.eg.db)
library(clusterProfiler)
library(data.table)
library(SCP)
library(tidyverse)
library(RColorBrewer)
library(Seurat)
library(SeuratData)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(Orthology.eg.db)
library(dplyr)
load("/Users/yaoyuelin/Desktop/seb/Updates/filtered_data_normalised.Rdata")
Idents(filtered_data)<-filtered_data$Group
color = c("#E64B35FF", "#4DBBD5FF","#00A087FF","#3C5488FF")
names(color)<-sort(unique(filtered_data$Group))
compare1<-c("PDOp18_shSRSF1_AP20187","PDOp18_shSRSF1")
compare2<-c("PDOp18_shRenilla_AP20187","PDOp18_shRenilla")
compare3<-c("PDOp18_shSRSF1_AP20187","PDOp18_shRenilla_AP20187")
compare4<-c("PDOp18_shSRSF1","PDOp18_shRenilla")
mart <- useMart("ENSEMBL_MART_ENSEMBL")
mart <- useDataset("hsapiens_gene_ensembl", mart)
list<-list(compare1,compare2,compare3,compare4)
dir.create("Comparison")
i=4
library(SingleCellExperiment)
groups<-list[[i]]
print(groups)
dir.create(paste0("Comparison/",groups[1],"_vs_",groups[2]))
sub_set<-filtered_data[,filtered_data$Group%in%groups]
color_sub<-color[names(color)%in%groups]
p<-DimPlot(sub_set , reduction = "umap",ncol = 2)+scale_color_manual(values=color_sub)+theme(strip.text = element_text(size=10))
p
sub_set <- FindNeighbors(sub_set, dims = 1:15)
sub_set <- FindClusters(sub_set, resolution = 0.5)
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )
p
library(SCP)
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)+scale_color_brewer(palette ="Paired" )
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",start = 7)+scale_color_brewer(palette ="Paired" )
p
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)&scale_color_brewer(palette ="Paired" )
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set$seurat_clusters
sub_set <- FindNeighbors(sub_set, dims = 1:15)
sub_set <- FindClusters(sub_set, resolution = 0.5)
sub_set<-filtered_data[,filtered_data$Group%in%groups]
color_sub<-color[names(color)%in%groups]
p<-DimPlot(sub_set , reduction = "umap",ncol = 2)+scale_color_manual(values=color_sub)+theme(strip.text = element_text(size=10))
p
sub_set <- FindNeighbors(sub_set, dims = 1:15)
sub_set <- FindClusters(sub_set, resolution = 0.5)
p<-DimPlot(sub_set, reduction = "umap")+scale_color_brewer(palette ="Paired" )
p
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
p
SCP::ClassDimPlot(
srt = sub_set, group.by = "seurat_clusters",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set$Seurat_Cluster<-sub_set$seurat_clusters
SCP::ClassDimPlot(
srt = sub_set, group.by = "Seurat_Cluster",
reduction = "UMAP", theme_use = "theme_blank"
)
sub_set<- RunSlingshot(srt = sub_set, group.by = "seurat_clusters", reduction = "UMAP",start = 7)
ggsave("/Users/yaoyuelin/Desktop/Slinghsot_cluster7.pdf",width = 8,height = 6)
ggsave("/Users/yaoyuelin/Desktop/Slinghsot_cluster7.pdf",width = 6,height = 4)
sub_set<- RunSlingshot(srt = sub_set, group.by = "Seurat_Cluster", reduction = "UMAP",start = 7)
ggsave("/Users/yaoyuelin/Desktop/Slinghsot_cluster7.pdf",width = 6,height = 4)
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tagList(
textInput("selected_clusterMarker", "Select cluster(s)",value = "5"),
selectInput("Mart_Marker", "Mart dataset:", choices=datasets_list, selected = "hsapiens_gene_ensembl", multiple = FALSE),
textInput("go_species_Marker", "GO OrgDb:",value = "org.Hs.eg.db"),
textInput("kegg_species_Marker", "KEGG organism:",value = "hsa"),
textInput("logfcMarker", "logFC:",value = 0.25),
sliderInput("Pvalue_Marker",
"Adjusted p value:",
min = 0,
max = 1,
value = 0.05),
textAreaInput("background_genesMarker", "Background genes (recommended): ",placeholder = "Just paste a list of genes (multiple-line gene list).",rows = 5),
actionButton(inputId = "bg_Liver3",                                       #action button to display background genes
label = NULL, icon = icon("tag"),style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
bsTooltip("bg_Liver3","Load background genes in HCC dataset.",placement = "bottom", trigger = "hover",
options = NULL),
actionButton("action_Marker","Submit",icon("paper-plane"),
style="color: #fff; background-color: #337ab7; border-color: #2e6da4")
)
runApp()
