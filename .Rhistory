# res = 300, width = 2700, height = 1500,compression = "lzw")
info.norm<-as.data.frame(expression_tsne$Y)
info.norm<-info.norm[!is.na(meta_data$state),]
colnames(info.norm)<-c("tsne1","tsne2")
colors<-c("#00008B","#008B8B","#8B008B","#8B0000","#828282","#00B2EE","#0000FF","#FF0000","#FF00FF","#FF8C00","#FFFF00","#006400","#00FF00",
"#CD950C","#FF6A6A","#CCCC33","pink","#FF1493","#8B7355","#00F5FF")
names(colors)=unique(sort(meta_data$state))
colors<-colors[1:16]
ggplot(info.norm, aes(x = tsne1, y = tsne2, colour = meta_data$state)) +
geom_point(alpha = 0.5,size=0.5) + theme_bw()+
xlab("t-SNE-1")+ylab("t-SNE-2")+
theme(panel.background=element_blank(),legend.title=element_blank(),legend.text = element_text(size=20),
panel.grid.minor=element_blank(),panel.grid.major=element_blank(),
axis.title.y=element_text(size=20,color="black"),
axis.title.x=element_text(size=20,color="black"),
axis.text.y=element_text(size=20,color="black"),
axis.text.x=element_text(size=20,color="black",hjust=0.95,vjust=0.2))+guides(color = guide_legend(override.aes = list(size=3)))+
scale_colour_manual(name="Cell states",values=colors,guide = guide_legend(ncol=2))+theme_blank()#+stat_ellipse(type="norm")
dev.off()
library(Seurat)
library(SeuratDisk)
library(rjson)
#devtools::install_github("zhanghao-njmu/SCP")
library(SeuratData)
library(loomR)
library(SCP)
library(reticulate)
sc <- import("scanpy")
files<-dir("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples")
files
i="10000GutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
srt <- NormalizeData(srt, normalization.method = "LogNormalize", scale.factor = 10000)
srt <- FindVariableFeatures(srt, selection.method = "vst", nfeatures = 1000)
gene<-VariableFeatures(srt)
count<-srt@assays[["RNA"]]@counts
count<-as.matrix(count)
count<-count[gene,]
srt
i="10000GutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
rm(list=ls())
library(Seurat)
library(SeuratDisk)
library(rjson)
#devtools::install_github("zhanghao-njmu/SCP")
library(SeuratData)
library(loomR)
library(SCP)
library(reticulate)
sc <- import("scanpy")
files<-dir("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples")
files
dir.create("/Volumes/khamseh-lab/Yuelin/GutCellAtlas")
i="10000GutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
srt <- NormalizeData(srt, normalization.method = "LogNormalize", scale.factor = 10000)
srt <- FindVariableFeatures(srt, selection.method = "vst", nfeatures = 1000)
srt
srt <- FindVariableFeatures(srt, selection.method = "vst", nfeatures = 2000)
srt
rm(list=ls())
library(Seurat)
library(SeuratDisk)
library(rjson)
#devtools::install_github("zhanghao-njmu/SCP")
library(SeuratData)
library(loomR)
library(SCP)
library(reticulate)
files<-dir("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples")
files
dir.create("/Volumes/khamseh-lab/Yuelin/GutCellAtlas")
i="10000GutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
sc <- import("scanpy")
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
srt <- NormalizeData(srt, normalization.method = "LogNormalize", scale.factor = 10000)
srt <- FindVariableFeatures(srt, selection.method = "vst", nfeatures = 2000)
srt <- ScaleData(srt)
srt <- RunPCA(srt, features = VariableFeatures(object = srt))
srt <- RunPCA(srt, features = VariableFeatures(object = srt))
srt <- RunUMAP(srt, dims = 1:10)
ClassDimPlot(
srt = srt, group.by = c("Integrated_05"),
reduction = "UMAP", theme_use = "theme_blank",
)+NoLegend()
i="10000GutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
View(srt)
ClassDimPlot(
srt = srt, group.by = c("Integrated_05"),
reduction = "UMAP", theme_use = "theme_blank",
)+NoLegend()
#srt <- RunPCA(srt, features = VariableFeatures(object = srt))
#srt <- RunUMAP(srt, dims = 1:10)
srt$category
#srt <- RunPCA(srt, features = VariableFeatures(object = srt))
#srt <- RunUMAP(srt, dims = 1:10)
table(srt$category)
table(srt$Integrated_05)
table(srt$Integrated_05)<100
srt$Integrated_05[table(srt$Integrated_05)<100]<-"Others"
srt$Integrated_05
srt <- adata_to_srt(adata)
srt$Integrate<-"Others"
srt$Integrate[table(srt$Integrated_05)>100]<-srt$Integrated_05[table(srt$Integrated_05)>100]
table(srt$Integrate)
table(srt$Integrated_05)
table(srt$Integrated_05)
length(unique(srt$Integrated_05))
table(srt$Integrated_05)
DimPlot(srt, reduction = "umap",group.by = "category")
meta_data<-srt@meta.data[,c("category","Integrated_05")]
meta_data
write.csv(meta_data,file="/Users/yaoyuelin/Downloads/GutCellAtlas/10000GutCells/Meta_data.csv")
meta_data
files
i="10000FetalPediatricGutCells.h5ad"
print(i)
adata <- sc$read_h5ad(paste0("/Users/yaoyuelin/Downloads/GutCellAtlas/Subsamples/",i))
srt <- adata_to_srt(adata)
srt$cell_type_group
table(srt$cell_type_group)
table(srt$cell_name)
table(srt$cell_name_detailed)
meta_data<-srt@meta.data[,c("cell_name","cell_name_detailed")]
meta_data
write.csv(meta_data,file="/Users/yaoyuelin/Downloads/GutCellAtlas/10000FetalPediatricGutCells/Meta_data.csv")
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
sessionInfo()
runApp('Downloads/MFIs')
sessionInfo()
library(org.Hs.eg.db)
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
renv::init()
topDeviatingHOI<-read.csv("topDeviatingHOIstates.csv")
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
library(data.table)
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
dim(training)
write.csv(training,file=paste0("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),append = F,quote = F,row.names = T,col.names = T)
colnames(training)[grepl("X21S",colnames(training))]
head(topDeviatingHOI)
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"))
count[1:10,1:10]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv",rownames=1))
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
count[1:10,1:10]
dim(count)
table(colnames(training)%in%colnames(count))
colnames(training)[!colnames(training)%in%colnames(count)]
colnames(count)
colnames(training)[!colnames(training)%in%colnames(count)]
dim(count)
colnames(count)
colnames(training)[!colnames(training)%in%colnames(count)]
colnames(count)[grepl("X",colnames(count))]
colnames(count)<-gsub("_","",colnames(count))
colnames(training)[!colnames(training)%in%colnames(count)]
write.csv(count,file=paste0("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),append = F,quote = F,row.names = T,col.names = T)
colnames(training)[grepl("X21S",colnames(training))]
colnames(training)[!colnames(training)%in%colnames(count)]
colnames(count)[grepl("X",colnames(count))]
colnames(training)[grepl("X21S",colnames(training))]
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("-","",topDeviatingHOI$genes)]
topDeviatingHOI$genes[grepl("_","",topDeviatingHOI$genes)]
topDeviatingHOI$genes[grepl("_",topDeviatingHOI$genes)]
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),rownames=1)
training[1:10,1:10]
dim(training)
write.csv(training,file=paste0("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),append = F,quote = F,row.names = T,col.names = T)
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),rownames=1)
training[1:10,1:10]
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
dim(training)
colnames(training)[!colnames(training)%in%colnames(count)]
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
count[1:10,1:10]
dim(count)
colnames(count)
colnames(count)<-gsub("_","",colnames(count))
colnames(training)[!colnames(training)%in%colnames(count)]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
count[1:10,1:10]
dim(count)
colnames(count)
colnames(count)[grepl("X",colnames(count))]
training[1:10,1:10]
colnames(training)[grepl("X21S",colnames(training))]
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
colnames(training)[grepl("X21S",colnames(training))]
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
dim(training)
colnames(training)[grepl("X21S",colnames(training))]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
count[1:10,1:10]
colnames(count)[grepl("X",colnames(count))]
colnames(count)<-gsub("_","-",colnames(count))
write.csv(count,file=paste0("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),append = F,quote = F,row.names = T,col.names = T)
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
topDeviatingHOI$genes<-gsub("rRNA","-rRNA"topDeviatingHOI$genes)
topDeviatingHOI$genes<-gsub("rRNA","-rRNA",topDeviatingHOI$genes)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = 1)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = F)
head(topDeviatingHOI)
rownames(topDeviatingHOI)<-topDeviatingHOI$X
topDeviatingHOI<-topDeviatingHOI[,-1]
head(topDeviatingHOI)
topDeviatingHOI$genes<-gsub("rRNA","-rRNA",topDeviatingHOI$genes)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
head(topDeviatingHOI)
topDeviatingHOI$genes<-gsub("--rRNA","-rRNA",topDeviatingHOI$genes)
head(topDeviatingHOI)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
topDeviatingHOI$genes<-gsub("-rRNA",".rRNA",topDeviatingHOI$genes)
head(topDeviatingHOI)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
training[1:10,1:10]
colnames(training)[grepl("X21S",colnames(training))]
colnames(training)<-gsub("-",".",colnames(training))
write.csv(training,file=paste0("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),append = F,quote = F,row.names = F,col.names = T)
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
dim(training)
write.csv(training,file=paste0("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"),append = F,quote = F,row.names = F,col.names = T)
colnames(training)[grepl("X21S",colnames(training))]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
count[1:10,1:10]
colnames(count)<-gsub("_",".",colnames(count))
colnames(training)[!colnames(training)%in%colnames(count)]
colnames(count)[grepl("X",colnames(count))]
colnames(count)<-gsub("-",".",colnames(count))
colnames(training)[!colnames(training)%in%colnames(count)]
write.csv(count,file=paste0("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),append = F,quote = F,row.names = T,col.names = T)
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
training<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/trainingData_CL01_02000Cells_0500Genes.csv"))
training[1:10,1:10]
dim(training)
colnames(training)[grepl("X21S",colnames(training))]
count<-as.matrix(fread("/Users/yaoyuelin/Downloads/Rac/Yeast_All_ss2000_cropped.csv"),rownames=1)
colnames(count)[grepl("X",colnames(count))]
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv")
head(topDeviatingHOI)
topDeviatingHOI$genes<-gsub("rRNA",".rRNA",topDeviatingHOI$genes)
rownames(topDeviatingHOI)<-topDeviatingHOI$X
topDeviatingHOI<-topDeviatingHOI[,-1]
head(topDeviatingHOI)
topDeviatingHOI<-topDeviatingHOI[,-1]
head(topDeviatingHOI)
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
head(topDeviatingHOI)
topDeviatingHOI<-read.csv("/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",colClasses = "character")
head(topDeviatingHOI)
rownames(topDeviatingHOI)<-topDeviatingHOI$X
topDeviatingHOI<-topDeviatingHOI[,-1]
topDeviatingHOI<-topDeviatingHOI[,-1]
topDeviatingHOI$genes<-gsub("rRNA",".rRNA",topDeviatingHOI$genes)
topDeviatingHOI$genes[grepl("rRNA",topDeviatingHOI$genes)]
write.csv(topDeviatingHOI,"/Users/yaoyuelin/Downloads/Rac/topDeviatingHOIstates.csv",row.names = T)
shiny::runGitHub("MFIs","YuelinYao")
library(biomaRt)
mart <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(mart)
list<-listDatasets(mart)
dim(list)
dim(list)
write.csv(list,file="/Users/yaoyuelin/Desktop/ensembl_dataset.csv")
log2(5)
log2(1)
log2(0.1)
log2(5)
q=100
k=1000
m=5000
N=14698
phyper(q-1, m, N-m, k, lower.tail = FALSE)
phyper(q-1, m, N-m, k)
dat <- data.frame(
"state_yes" = c(q, k-q),
"state_no" = c(m-q, (N-k)-(m-q)),
row.names = c("type_yes", "type_no"),
stringsAsFactors = FALSE
)
fisher.test(dat,alternative = "greater")
a<-fisher.test(dat,alternative = "greater")
log2(0.19)
fisher.test(dat)
sessionInfo()
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#
# ====== import R libraries: ####
# Some initial setup:
#library(BiocManager)
#options(repos = BiocManager::repositories())
library(shiny)
library(shinythemes)
import::from(shinycssloaders, withSpinner)
#library(reticulate)
reticulate::py_config()
library(shinyBS)
library(shinyWidgets)
library(gridExtra, verbose=FALSE)
library(RColorBrewer, verbose=FALSE)
library(ComplexHeatmap)
library(Seurat)
library(stringr)
library(pheatmap)
library(dplyr)
library(rrvgo)
library(DT)
library(clusterProfiler)
library(data.table)
library(biomaRt)
library(ggplot2)
options(shiny.maxRequestSize = 5000*1024^2)
sessionInfo()
getwd()
library(OrgDb)
library("OrgDb")
Cell_states<-read.xlsx("/Users/yaoyuelin/Desktop/TableS3.xlsx",sheetIndex = 1)
library(xlsx)
Cell_states<-read.xlsx("/Users/yaoyuelin/Desktop/TableS3.xlsx",sheetIndex = 1)
Cell_states
class("Cell_states")
write.csv(Cell_states,file="/Users/yaoyuelin/Desktop/CancerState.csv")
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1)
dim(Cell_states)[2]
List=NULL
i=1
cellstates
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
RefSet<-List
save(RefSet,file="/Users/yaoyuelin/Downloads/MFIs/data/CancerState.Rdata")
load("/Users/yaoyuelin/Downloads/MFIs/data/CancerState.Rdata")
RefSet
load("/Users/yaoyuelin/Downloads/MFIs/data/CellCyle.Rdata")
load("/Users/yaoyuelin/Downloads/MFIs/data/CellCycleState.Rdata")
RefSet
RefSet
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1)
dim(Cell_states)[2]
Cell_states
load("/Users/yaoyuelin/Downloads/MFIs/data/CellCycleState.Rdata")
RefSet
RefSet
cellcycle<-data.frame(s.genes=NA,g2m.genes=NA)
cellcycle
cellcycle$s.genes<-RefSet[["s.genes"]]
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1)
Cell_states
write.csv(Cell_states,file="/Users/yaoyuelin/Desktop/CancerState.csv",na = F)
write.csv(Cell_states,file="/Users/yaoyuelin/Desktop/CancerState.csv",na = "")
cellcycle<-data.frame(s.genes=rep(NA,54),g2m.genes=rep(NA,54))
cellcycle
lengths(RefSet)
cellcycle$s.genes[1:43]<-RefSet[["s.genes"]]
cellcycle$g2m.genes<-RefSet[["g2m.genes"]]
cellcycle
cellcycle<-data.frame(S.genes=rep(NA,54),G2M.genes=rep(NA,54))
cellcycle$S.genes[1:43]<-RefSet[[".genes"]]
cellcycle$G2M.genes<-RefSet[["g2m.genes"]]
cellcycle<-data.frame(S.genes=rep(NA,54),G2M.genes=rep(NA,54))
cellcycle$S.genes[1:43]<-RefSet[["s.genes"]]
cellcycle$G2M.genes<-RefSet[["g2m.genes"]]
cellcycle
write.csv(cellcycle,file="/Users/yaoyuelin/Desktop/CellCycleState.csv",na = "")
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1)
dim(Cell_states)[2]
Cell_states
List=NULL
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1,na.strings = NA)
Cell_states
dim(Cell_states)[2]
Cell_states
List=NULL
i=1
cellstates
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
Cell_states<-read.csv("/Users/yaoyuelin/Desktop/CancerState.csv",row.names = 1,blank.lines.skip = T)
Cell_states
dim(Cell_states)[2]
Cell_states
List=NULL
i=1
cellstates
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
List=NULL
i=1
cellstates
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-cellstates[!is.null(cellstates)]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
List=NULL
i=1
cellstates
for (i in 1:dim(Cell_states)[2]){
cellstates<-Cell_states[,i]
cellstates<-cellstates[!is.na(cellstates)]
cellstates<-cellstates[!cellstates==""]
cellstates<-list(cellstates)
names(cellstates)<-colnames(Cell_states)[i]
List<-c(List,cellstates)
}
List
shiny::runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
Mydata_raw_m <- matrix(Mydata_raw_FDR,nrow = dim(Data_mtrix)[1],byrow = F)
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
P_set[ct]=p_value
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
runApp('Downloads/MFIs')
